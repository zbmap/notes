内核凭借先入为主的方式，优先获取到特权，通过特权指令建立规则，核心是把用户进程推到非特权模式，这样，用户进程没有权利执行特权指令改变规则，只能遵守规则；
 建立规则主要是内存保护的页表cr3（水平隔离用户进程），以及中断异常的idt 和tr（用户进程和内核通信）；

Vmalloc 分配的是虚拟地址空间？？？？

缓存一致性是硬件解决的问题，软件不需要考虑，软件需要考虑的是互斥和指令执行顺序；

Linux通过软件切换上下文，其实是模拟了硬件一条指令实现的是，即最后调到的按个1地址就是一条硬件切换指令之后的一条指令；可以仿照硬件一条指令切换的模式进行理解；


Linux 权限管理用户： if (root) {} else if (owner) {} else if (group) {} else {}
Linux segment 只是做了段的权限判断，放了kernel_cs kernel_ds, user_cs, user_ds四个段描述符，只做权限判断，其他一律是程序地址；
Page 权限判断 if (not prilige)  {return ;}. If (read) {only can read} else {can read and write} 
Fork 创建一个进程  execute 替换一个可执行文件； 所以一个可执行文件可以对应多个进程，一个进程也可以对应多个可执行文件；

各种门作为用户态和内核态的交互界面；进行一些权限检查和服务提供；
Linux对于段只是做一个内核权限和用户权限分别，以及做一个数据段读写权限以及代码段一个执行只读权限，其余的一概不用，在gdt中只有4个段，usersc userds.  Kernelcs kernelds

Linux 内核初始化阶段内存分配使用的bootmem进行管理，就是一个很简单的bitmap 到page frame的管理方式，等到伙伴系统初始化之后就会把这个bootmem撤销掉，没有使用的page归到伙伴系统里面统一管理；

Kernel 内存相关几个主题：
   物理内存管理（slab  per cpu page  buddy） 以及userprocess 虚拟内存管理，以及页框回收和交换，等等；
   通过系统调用触发的内核路径就是进程上下文；
  页框回收需要考虑是通过普通文件接口进行读写引起的缓存page，还需要跟踪通过mmap映射到多个进程的虚拟地址空间的page；
